* General coding stuff

** Modes

#+BEGIN_SRC emacs-lisp

  (use-package protobuf-mode)
  (use-package json-mode)
  (use-package yaml-mode)
  (use-package markdown-mode)
  (use-package markdown-toc)
  (use-package edit-indirect)
  (use-package makefile-executor
    :config
    (add-hook 'makefile-mode-hook 'makefile-executor-mode)
    )

#+END_SRC

** Flycheck

Enables flycheck. On the fly syntax checking (e.g. use =M-x
flycheck-list-errors= to see what's wrong in the current file).

#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :config
    (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    (setq flycheck-markdown-markdownlint-cli-config ".markdownlint.json")
    (global-flycheck-mode)
    )

#+END_SRC

** Company

Enables company. At cursor auto-completion (with pop-up). 

#+BEGIN_SRC emacs-lisp

  (use-package company
    :config
    (global-company-mode)
    )

#+END_SRC

** YasSnippet

Enables (code) snippets.

#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :bind (
           ("C-c C-y e" . 'yas-expand)
           )
    :config
    (yas-global-mode)
    )

  (use-package yasnippet-snippets)

#+END_SRC

** YaFolding

Folding code (based on indention).

#+BEGIN_SRC emacs-lisp

  (use-package yafolding
    :bind (
           ("C-c C-y t a" . 'yafolding-toggle-all)
           ("C-c C-y t e" . 'yafolding-toggle-element)
           )
    :hook (
           (prog-mode . yafolding-mode)
           )
    )

#+END_SRC

** Projectile

Enable projectile project management.

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :config
    (add-to-list 'projectile-globally-ignored-directories "_build")
    (add-to-list 'projectile-globally-ignored-directories "deps")
    (add-to-list 'projectile-globally-ignored-directories ".elixir_ls")
    (add-to-list 'projectile-globally-ignored-directories "target")
    (add-to-list 'projectile-globally-ignored-directories ".bloop")
    (add-to-list 'projectile-globally-ignored-directories ".bsp")
    (add-to-list 'projectile-globally-ignored-directories ".metals")

    (setq projectile-project-search-path '("~/Development/Work/" "~/Development/Home/"))
    (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
    (projectile-mode)
    )

#+END_SRC

** Magit

Make git/magit work.

#+BEGIN_SRC emacs-lisp

  (use-package magit
    :bind (
           ("C-x g" . 'magit-status)
           )
    :config
    (setq magit-pull-or-fetch t)
    (define-key magit-mode-map "f" 'magit-pull)
    (define-key magit-mode-map "F" nil)
    :custom
    (magit-wip-mode t)
    (magit-no-confirm (quote (safe-with-wip)))
    )

#+END_SRC

** Forge

*Note:* (Obviously) For forge to work you need to put the
=~/.authforge= file in place.

#+BEGIN_SRC emacs-lisp

  (use-package forge
    :after magit
    :config
    (setq auth-sources '("~/.authforge"))
    )

  ;; copy the url to the PR into the CnP buffer (when/after creating a PR) 
  (defun my-forge-post-submit-callback-kill-url (value _headers _status _req)
    (when t
      (when-let ((url (alist-get 'html_url value)))
        (kill-new url))))

  (add-hook 'forge-post-submit-callback-hook 'my-forge-post-submit-callback-kill-url)

#+END_SRC

** Code Review

#+BEGIN_SRC emacs-lisp

  (use-package code-review
    :after forge
  )

#+END_SRC
